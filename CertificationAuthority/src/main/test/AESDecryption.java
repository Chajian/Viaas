public class AESDecryption {

    // AES的逆S-Box
    public static final int[] INV_S_BOX = {
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    };

    public static byte[] encrypt(byte[] state, byte[] key) {
        byte[] expandedKey = AESKeyExpansion.keyExpansion(key); // 执行密钥扩展

        // 初始轮
        addRoundKey(state, expandedKey, 0);

        // 主轮（第1轮到第N-1轮）
        for (int round = 1; round < 10; round++) {
            subBytes(state);
            shiftRows(state);
            mixColumns(state);
            addRoundKey(state, expandedKey, round);
        }

        // 最终轮
        subBytes(state);
        shiftRows(state);
        addRoundKey(state, expandedKey, 10);

        return state;
    }

    // 轮密钥加法
    public static void addRoundKey(byte[] state, byte[] expandedKey, int round) {
        for (int i = 0; i < 16; i++) {
            state[i] ^= expandedKey[round * 16 + i]; // 计算一维数组的索引
        }
    }

    // S-Box替换
    public static void subBytes(byte[] state) {
        for (int i = 0; i < 16; i++) {
            state[i] = (byte) INV_S_BOX[state[i] & 0xFF];
        }
    }

    // 行移位
    public static void shiftRows(byte[] state) {
        byte[] temp = new byte[16];

        // 第一行不变
        // 第二行左移1字节
        temp[0] = state[0];
        temp[1] = state[5];
        temp[2] = state[10];
        temp[3] = state[15];

        // 第三行左移2字节
        temp[4] = state[4];
        temp[5] = state[9];
        temp[6] = state[14];
        temp[7] = state[3];

        // 第四行左移3字节
        temp[8] = state[8];
        temp[9] = state[13];
        temp[10] = state[2];
        temp[11] = state[7];

        // 第五行
        temp[12] = state[12];
        temp[13] = state[1];
        temp[14] = state[6];
        temp[15] = state[11];

        System.arraycopy(temp, 0, state, 0, 16); // 将临时数组拷贝回状态数组
    }

    // 列混合
    public static void mixColumns(byte[] state) {
        byte[] temp = new byte[16];
        for (int i = 0; i < 4; i++) {
            int colIndex = i * 4;
            temp[colIndex] = (byte) (mul(0x02, state[colIndex]) ^ mul(0x03, state[colIndex + 1]) ^ state[colIndex + 2] ^ state[colIndex + 3]);
            temp[colIndex + 1] = (byte) (state[colIndex] ^ mul(0x02, state[colIndex + 1]) ^ mul(0x03, state[colIndex + 2]) ^ state[colIndex + 3]);
            temp[colIndex + 2] = (byte) (state[colIndex] ^ state[colIndex + 1] ^ mul(0x02, state[colIndex + 2]) ^ mul(0x03, state[colIndex + 3]));
            temp[colIndex + 3] = (byte) (mul(0x03, state[colIndex]) ^ state[colIndex + 1] ^ state[colIndex + 2] ^ mul(0x02, state[colIndex + 3]));
        }
        System.arraycopy(temp, 0, state, 0, 16); // 将混合后的列数据拷贝回状态数组
    }

    // 有限域GF(2^8)上的乘法
    private static byte mul(int a, byte b) {
        byte result = 0;
        byte temp = b;

        for (int i = 0; i < 8; i++) {
            if ((a & 1) != 0) {
                result ^= temp;
            }
            boolean highBitSet = (temp & 0x80) != 0;
            temp <<= 1;
            if (highBitSet) {
                temp ^= 0x1B;
            }
            a >>= 1;
        }

        return result;
    }
}
