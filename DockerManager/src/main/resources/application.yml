server:
  port: 8888
  address: 0.0.0.0
  mysql: 127.0.0.1
mybatis:
  config-location: classpath:conf/mybatis-conf.xml
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-unknown-column-behavior: warning
    local-cache-scope: session
    cache-enabled: true
spring:
  ssl:
    bundle:
      jks:
        demo-client:
          key:
            alias: demo-client-sample
            password: password
          keystore:
            location: classpath:keystore.p12
            password: password
            type: PKCS12
          truststore:
            location: classpath:keystore.p12
            password: password
            type: PKCS12
        self-signed-demo-client:
          key:
            alias: self-signed-demo-client-sample
            password: password
          keystore:
            location: classpath:keystore-self-signed.p12
            password: password
            type: PKCS12
          truststore:
            location: classpath:keystore-self-signed.p12
            password: password
            type: PKCS12
  #  ?????
  security:
    oauth2:
      client:
        registration:
          messaging-client-oidc:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8888/login/oauth2/code/{registrationId}"
            scope: openid, profile
            client-name: messaging-client-oidc
          messaging-client-authorization-code:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8888/authorized"
            scope: message.read,message.write
            client-name: messaging-client-authorization-code
          messaging-client-client-credentials:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: messaging-client-client-credentials
          user-client-authorization-code:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8888/authorized"
            scope: user.read
            client-name: user-client-authorization-code
          messaging-client-device-code:
            provider: spring
            client-id: device-messaging-client
            client-authentication-method: none
            authorization-grant-type: urn:ietf:params:oauth:grant-type:device_code
            scope: message.read,message.write
            client-name: messaging-client-device-code
          mtls-demo-client-client-credentials:
            provider: spring-tls
            client-id: mtls-demo-client
            client-authentication-method: tls_client_auth
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: mtls-demo-client-client-credentials
          mtls-self-signed-demo-client-client-credentials:
            provider: spring-tls
            client-id: mtls-demo-client
            client-authentication-method: self_signed_tls_client_auth
            authorization-grant-type: client_credentials
            scope: message.read,message.write
            client-name: mtls-self-signed-demo-client-client-credentials
        provider:
          spring:
            issuer-uri: http://localhost:9000
          spring-tls:
            token-uri: https://localhost:9443/oauth2/token
  datasource:
    #    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://${server.mysql}:3306/docker_cloud
    username: root
    password: 123456
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
    driver-class-name: com.mysql.cj.jdbc.Driver
docker-cloud:
  userName: "dockerxylyjy"
  passWord: "docker@123789"
  email: "xylyjy@gmail.com"
  #  host: "unix:///var/run/docker.sock"
  host: "tcp://localhost:2375"
  url: "https://index.docker.io/v1/"
  kafkaIp: 127.0.0.1
  kafkaPort: 9092
kafka:
  enable: true
messages:
  base-uri: https://127.0.0.1:8443/messages
user-messages:
  base-uri: http://127.0.0.1:8091/user/messages